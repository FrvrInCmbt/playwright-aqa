import {test, expect} from "@playwright/test"


test.describe("Registration form positive and negative scenarious", async () => {
    test.beforeEach(async ({page}) => {
        await page.goto("/")
        const header = page.locator('.header')
        const signInBtn = header.getByRole('button', {name: 'Sign in'})
        const modal = page.locator('.modal-content')
        const registerBtn = modal.getByRole('button', {name: 'registration'}).or(modal.getByRole('button', {name: 'реєстрація'}))
        await signInBtn.click()
        await registerBtn.click()
    })
    test("Register new user, Positive scenario", async ({page}) => {
        const registrationModal = page.locator(".modal-content")
        expect(registrationModal.isVisible)
        const fieldName = registrationModal.locator("#signupName")
        let name = "  Jedi   "
        await fieldName.fill(name.trim())
        const fieldLastName = registrationModal.locator("#signupLastName")
        let lastName = "   Jedaevich  "
        await fieldLastName.fill(lastName.trim())
        const fieldEmail = registrationModal.locator("#signupEmail")
        await fieldEmail.fill("sometestaqa@test.com")
        const fieldPassword = registrationModal.locator("#signupPassword")
        await fieldPassword.fill("Qwer1234!")
        const fieldRepeatPassword = registrationModal.locator("#signupRepeatPassword")
        await fieldRepeatPassword.fill("Qwer1234!")
        const modalFooter = registrationModal.locator(".modal-footer")
        const registerModalBtn = modalFooter.getByText("Register")
        await registerModalBtn.isEnabled()
        await registerModalBtn.click()
        await page.locator("h1", {hasText: "Garage"}).isVisible()
    })

    test("Registration of user that already exists, Negative case", async ({page}) => {
        const registrationModal = page.locator(".modal-content")
        expect(registrationModal.isVisible)
        const fieldName = registrationModal.locator("#signupName")
        await fieldName.fill("Aqa")
        const fieldLastName = registrationModal.locator("#signupLastName")
        await fieldLastName.fill("Test")
        const fieldEmail = registrationModal.locator("#signupEmail")
        await fieldEmail.fill("sometestaqa@test.com")
        const fieldPassword = registrationModal.locator("#signupPassword")
        await fieldPassword.fill("Qwer1234!")
        const fieldRepeatPassword = registrationModal.locator("#signupRepeatPassword")
        await fieldRepeatPassword.fill("Qwer1234!")
        const modalFooter = registrationModal.locator(".modal-footer")
        const registerModalBtn = modalFooter.getByText("Register")
        await registerModalBtn.click()
        const snackBarUserExist = registrationModal.locator(".alert-danger")
        await expect.soft(snackBarUserExist).toBeVisible()
    })

    test("Validation of Name input field, ", async ({page}) => {
        const registrationModal = page.locator(".modal-content")
        expect(registrationModal.isVisible)
        const inputFieldName = registrationModal.locator("#signupName")
        await inputFieldName.focus()
        await inputFieldName.blur()
        const nameErrorRequired = registrationModal.getByText("Name required")
        await expect.soft(nameErrorRequired).toBeVisible()
        await inputFieldName.fill("2")
        await inputFieldName.blur()
        const nameErrorInvalid = registrationModal.getByText("Name is invalid")
        const nameErrorLength = registrationModal.getByText("Name has to be from 2 to 20 characters long")
        await expect.soft(nameErrorInvalid).toHaveText("Name is invalid")
        await expect.soft(nameErrorLength).toHaveText("Name has to be from 2 to 20 characters long")
        await expect.soft(nameErrorLength).toHaveCSS("color", "rgb(220, 53, 69)")
    })

    test("Validation of Last Name input field, ", async ({page}) => {
        const registrationModal = page.locator(".modal-content")
        expect(registrationModal.isVisible)
        const inputLastName = registrationModal.locator("#signupLastName")
        await inputLastName.focus()
        await inputLastName.blur()
        const lastNameErrorRequired = registrationModal.getByText("Last name required")
        await expect.soft(lastNameErrorRequired).toBeVisible()
        await inputLastName.fill("#")
        await inputLastName.blur()
        const lastNameErrorInvalid = registrationModal.getByText("Last name is invalid")
        const lastNameErrorLength = registrationModal.getByText("Last name has to be from 2 to 20 characters long")
        await expect.soft(lastNameErrorInvalid).toHaveText("Last name is invalid")
        await expect.soft(lastNameErrorLength).toHaveText("Last name has to be from 2 to 20 characters long")
        await expect.soft(lastNameErrorLength).toHaveCSS("color", "rgb(220, 53, 69)")
    })

    test("Email input field validation", async ({page}) => {
        const registrationModal = page.locator(".modal-content")
        expect(registrationModal.isVisible)
        const inputEmail = registrationModal.locator("#signupEmail")
        await inputEmail.focus()
        await inputEmail.blur()
        const emailRequiredError = registrationModal.getByText("Email required")
        await expect.soft(emailRequiredError).toBeVisible()
        await inputEmail.fill("ch@#.com")
        await inputEmail.blur()
        const emailWrongDataError = registrationModal.getByText("Email is incorrect")
        await expect.soft(emailWrongDataError).toBeVisible()
    })

    test("Validation of Password input", async ({page}) => {
        const registrationModal = page.locator(".modal-content")
        expect(registrationModal.isVisible)
        const inputPassword = registrationModal.locator("#signupPassword")
        await inputPassword.focus()
        await inputPassword.blur()
        const errorPasswordRequired = registrationModal.getByText("Password required")
        await expect.soft(errorPasswordRequired).toBeVisible()
        await inputPassword.fill("1234567")
        const errorPasswordLength = registrationModal.getByText("Password has to be from 8 to 15 characters long and contain at least one integer, one capital, and one small letter")
        await expect.soft(errorPasswordLength).toBeVisible()
    })

    test("Validation of Re-Enter password input", async ({page}) => {
        const registrationModal = page.locator(".modal-content")
        expect(registrationModal.isVisible)
        const inputPassword = registrationModal.locator("#signupPassword")
        await inputPassword.fill("Qwer1234!")
        const inputRepeatPassword = registrationModal.locator("#signupRepeatPassword")
        await inputRepeatPassword.focus()
        await inputRepeatPassword.blur()
        const repeatPasswordErrorRequired = registrationModal.locator("text=Re-enter password required")
        await expect.soft(repeatPasswordErrorRequired).toBeVisible()
        await inputRepeatPassword.fill("1234567")
        const rePasswordErrorLength = registrationModal.getByText("Password has to be from 8 to 15 characters long and contain at least one integer, one capital, and one small letter")
        await expect.soft(rePasswordErrorLength).toBeVisible()
        await inputRepeatPassword.fill("Qwer12345!")
        const errorPasswordNotMatch = registrationModal.getByText("Passwords do not match")
        await expect.soft(errorPasswordNotMatch).toBeVisible()
        await inputRepeatPassword.fill("Qwer1234!")
        await expect.soft(errorPasswordNotMatch).toBeHidden()
    })
})
